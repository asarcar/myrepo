# User Specific Changes

#-------------------
# Personnal Function
#-------------------

function pathadd() 
{
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
        PATH="${PATH:+"$PATH:"}$1"
    fi
}

#-------------------------------------------------------------
# A few fun ones
#-------------------------------------------------------------

# Adds some text in the terminal frame (if applicable).

function xtitle()
{
    case "$TERM" in
    *term* | rxvt)
        echo -en  "\e]0;$*\a" ;;
    *)  ;;
    esac
}


# Aliases that use xtitle
alias top='xtitle Processes on $HOST && top'
alias make='xtitle Making $(basename $PWD) ; make'

# .. and functions
function man()
{
    for i ; do
        xtitle The $(basename $1|tr -d .[:digit:]) manual
        command man -a "$i"
    done
}


#-------------------------------------------------------------
# Make the following commands run in background automatically:
#-------------------------------------------------------------

function te()  # wrapper around xemacs/gnuserv
{
    if [ "$(gnuclient -batch -eval t 2>&-)" == "t" ]; then
       gnuclient -q "$@";
    else
       ( xemacs "$@" &);
    fi
}

function soffice() { command soffice "$@" & }
function firefox() { command firefox "$@" & }
function xpdf() { command xpdf "$@" & }


#-------------------------------------------------------------
# File & strings related functions:
#-------------------------------------------------------------


# Find a file with a pattern in name:
function ff() { find . -type f -iname '*'"$*"'*' -ls ; }

# Find a file with pattern $1 in name and Execute $2 on it:
function fe() { find . -type f -iname '*'"${1:-}"'*' \
-exec ${2:-file} {} \;  ; }

#  Find a pattern in a set of files and highlight them:
#+ (needs a recent version of egrep).
function fstr()
{
    OPTIND=1
    local mycase=""
    local usage="fstr: find string in files.
Usage: fstr [-i] \"pattern\" [\"filename pattern\"] "
    while getopts :it opt
    do
        case "$opt" in
           i) mycase="-i " ;;
           *) echo "$usage"; return ;;
        esac
    done
    shift $(( $OPTIND - 1 ))
    if [ "$#" -lt 1 ]; then
        echo "$usage"
        return;
    fi
    find . -type f -name "${2:-*}" -print0 | \
xargs -0 egrep --color=always -sn ${case} "$1" 2>&- | more

}


function swap()
{ # Swap 2 filenames around, if they exist (from Uzi's bashrc).
    local TMPFILE=tmp.$$

    [ $# -ne 2 ] && echo "swap: 2 arguments needed" && return 1
    [ ! -e $1 ] && echo "swap: $1 does not exist" && return 1
    [ ! -e $2 ] && echo "swap: $2 does not exist" && return 1

    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

function extract()      # Handy Extract Program
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}


# Creates an archive (*.tar.gz) from given directory.
function maketar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }

# Create a ZIP archive of a file or folder.
function makezip() { zip -r "${1%%/}.zip" "$1" ; }

# Make your directories and files access rights sane.
function sanitize() { chmod -R u=rwX,g=rX,o= "$@" ;}

#-------------------------------------------------------------
# Process/system related functions:
#-------------------------------------------------------------


function my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,bsdtime,command ; }
function pp() { my_ps f | awk '!/awk/ && $0~var' var=${1:-".*"} ; }


function killps()   # kill by process name
{
    local pid pname sig="-TERM"   # default signal
    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
        echo "Usage: killps [-SIGNAL] pattern"
        return;
    fi
    if [ $# = 2 ]; then sig=$1 ; fi
    for pid in $(my_ps| awk '!/awk/ && $0~pat { print $1 }' pat=${!#} )
    do
        pname=$(my_ps | awk '$1~var { print $5 }' var=$pid )
        if ask "Kill process $pid <$pname> with signal $sig?"
            then kill $sig $pid
        fi
    done
}

function mydf()         # Pretty-print of 'df' output.
{                       # Inspired by 'dfc' utility.
    for fs ; do

        if [ ! -d $fs ]
        then
          echo -e $fs" :No such file or directory" ; continue
        fi

        local info=( $(command df -P $fs | awk 'END{ print $2,$3,$5 }') )
        local free=( $(command df -Pkh $fs | awk 'END{ print $4 }') )
        local nbstars=$(( 20 * ${info[1]} / ${info[0]} ))
        local out="["
        for ((j=0;j<20;j++)); do
            if [ ${j} -lt ${nbstars} ]; then
               out=$out"*"
            else
               out=$out"-"
            fi
        done
        out=${info[2]}" "$out"] ("$free" free on "$fs")"
        echo -e $out
    done
}


function my_ip() # Get IP adress on ethernet.
{
    MY_IP=$(/sbin/ifconfig eth0 | awk '/inet/ { print $2 } ' |
      sed -e s/addr://)
    echo ${MY_IP:-"Not connected"}
}

function ii()   # Get current host related info.
{
    echo -e "\nYou are logged on ${BRed}$HOST"
    echo -e "\n${BRed}Additionnal information:$NC " ; uname -a
    echo -e "\n${BRed}Users logged on:$NC " ; w -hs |
             cut -d " " -f1 | sort | uniq
    echo -e "\n${BRed}Current date :$NC " ; date
    echo -e "\n${BRed}Machine stats :$NC " ; uptime
    echo -e "\n${BRed}Memory stats :$NC " ; free
    echo -e "\n${BRed}Diskspace :$NC " ; mydf / $HOME
    echo -e "\n${BRed}Local IP Address :$NC" ; my_ip
    echo -e "\n${BRed}Open connections :$NC "; netstat -pan --inet;
    echo
}

#-------------------------------------------------------------
# Misc utilities:
#-------------------------------------------------------------

function repeat()       # Repeat n times command.
{
    local i max
    max=$1; shift;
    for ((i=1; i <= max ; i++)); do  # --> C-like syntax
        eval "$@";
    done
}


function ask()          # See 'killps' for example of use.
{
    echo -n "$@" '[y/n] ' ; read ans
    case "$ans" in
        y*|Y*) return 0 ;;
        *) return 1 ;;
    esac
}

function corename()   # Get name of app that created a corefile.
{
    for file ; do
        echo -n $file : ; gdb --core=$file --batch | head -1
    done
}

function kill_process () # Kill the application with the name provided
{ 
    echo -e "Killing process $@\nProcess Number: "`ps xw | grep "$@" | cut -f2 -d ' ' | head -1`" killed!";
    kill `ps xw | grep "$@" | cut -f2 -d ' ' | head -1`;
}

#-------------------------------------------------------------
# Source Code Utilities:
#-------------------------------------------------------------
file_ext="-name *.[chRCH] -o -name *.cc -o -name *.cpp -o -name *.c++ -o -name *.hh -o -name *.hpp -o -name *.h++ -o -name *.java -o -name *.py -o -name *.php -o -name *.js -o -name *.html -o -name *.txt"

proj_lc() # Count number of lines of code in the directory $1 and (optionally) with extension $2
{
    local tmp=$file_ext

    # Usage Validation
    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
        echo "Usage: proj_lc code-directory [file-extension]"
        return;
    fi

    # Extension provided: just count files matching that extension
    if [ "$#" -eq 2 ]; then
        tmp="-name *.$2"
    fi

    find $1 $tmp | xargs wc -l
}

proj_db() # Create project DB: cscope and etags DB for code in dir $1, put the DB in dir $2, and (optionally) only for files with extension $3 
{
    local tmp=$file_ext
    local dirname=""
    local filename=""
    local tagfilename=""
    local codedbdir=""

    # Usage Validation
    if [ "$#" -lt 2 ] || [ "$#" -gt 3 ]; then
        echo "Usage: proj_db proj-directory browse-index-db-directory [file-extension]"
        return;
    fi

    # Extract the last part of the project directory path - use as base for db files 
    dirname="${1##*/}"
    filename="$dirname.files"
    tagfilename="$dirname.TAGS"
    codedbdir="$2/$dirname"

    # Create extension specific file list and TAGS DB: does not help cscope 
    # as only one file prefix is used in cscope case
    if [ "$#" -eq 3 ]; then
        tmp="-name *.$3"
        filename="${1##*/}-$3.files"
        tagfilename="${1##*/}-$3.TAGS"
    fi

    # Move into the directory where we will build the code browse index-db
    mkdir -p $codedbdir
    pushd $codedbdir
    find $1 $tmp >| $filename
    cscope -q -b -R -i $filename
    cat $filename | xargs etags -a -o $tagfilename
    popd
}

#------------------------------------------------------------
# LOGs
#------------------------------------------------------------
alog () {
  if [ "$#" != 1 ]; then
      echo "Usage: authlog grepword";
      echo "Example: authlog sshd";
      return;
  fi
  grep $1 /var/log/auth.log | less;
}

# Daemon Log: /var/log/daemon.log
# Debug Log: /var/log/debug
# Kernel Log: /var/log/kern.log
# Kernel Ring Buffer: dmesg | grep pnp | less; /var/log/dmesg
# Messages Log For Apps/System Facilities: /var/log/messages
# System Log: /var/log/syslog
# Application Logs: /var/log/apache2/access.log or error.log
# faillog: display login failure stored in binary at /var/log/faillog
# lastlog: display las logins stored in binary at /var/log/lastlog
# who: display /var/log/wtmp login records
# syslogd (sysklogd): log router/aggregator based of /etc/syslog.conf
#   syslog is the protocol as well as application to send message to 
#   Linux system logfile located at /var/log directory. Sysklogd provides 
#   two system utilities which provide support for system logging and 
#   kernel message trapping. Usually most program and apps use C or 
#   syslog application / library sending syslog messages.
# logger: (logger --help) adds message to syslog
# logrotate: keeps current log file size reasonable. compress and move
#   old log files based on config at /etc/logrotate.{d/.conf}
#   cmds are at /etc/cron.daily/{logrotate,sysklogd}. also see savelog 

#------------------------------------------------------------
# Network Specific
#------------------------------------------------------------
function int_ip() # gets the ip address of the INTERFACE passed
{
    # Usage Validation
    if [ "$#" -eq 0 ]; then
        /sbin/ifconfig | grep "inet addr" | awk -F: '{print $2}' | awk '{print $1}';
        return;
    fi

    /sbin/ifconfig $1 | grep "inet addr" | awk -F: '{print $2}' | awk '{print $1}';
}

function ext_ip() # gets the ip address of the INTERFACE passed
{ 
    # Usage Validation
    if [ "$#" != 0 ]; then
        echo "Usage: ext_ip";
        return;
    fi

    curl http://ipecho.net/plain; echo;
}

#------------------------------------------------------------
# Context Specific 
#------------------------------------------------------------
# Execute context specific .alias files
if [ -f $HOME/.env_custom/.function_custom_work ]; then
  source $HOME/.env_custom/.function_custom_work
fi
