#
# Sample configuration file for ISC dhcpd for Debian
#
# Attention: If /etc/ltsp/dhcpd.conf exists, that will be used as
# configuration file instead of this file.
#
#

# enables global dynamic updating
ddns-updates on;

# The ddns-updates-style parameter controls whether or not the server will
# attempt to do a DNS update when a lease is confirmed. 
# Default: behavior of the version 2 packages ('none', since DHCP v2 didn't
# have support for DDNS.)
# interim
ddns-update-style interim;

# option definitions common to all supported networks...
option domain-name "example.org";
option domain-name-servers ns1.example.org, ns2.example.org;

# How long the DHCP leases are valid?
default-lease-time 600;

# maximum time a client will go before it asks for a new address. 
# This option can be set longer or shorter to taste; for a small 
# home LAN, it doesn't make much difference what it's set to.
max-lease-time 7200;

# DNS updates even for clients with "static leases"; that is, 
# clients who receive a DHCP address that you specifically assign 
# them based on MAC address. Saves manual update of DNS entries
update-static-leases on;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
# Tells the DHCP server that it is to act as the one true DHCP 
# server for the scopes it's configured to understand, by 
# sending out DHCPNAK (DHCP-no-acknowledge) packets to misconfigured 
# DHCP clients. You always want authoritative set if this is your 
# only DHCP server; without it, the server won't tell misconfigured 
# clients that they're misconfigured, and some clients might not 
# get IP addresses immediately on requesting them.
authoritative;

# sets "rndc-key" as a key variable so that when we define our 
# DHCP scope (or scopes), we can reference just the name of the key
key "rndc-key" { algorithm hmac-md5; secret "t4lS7i8cCEw3i77IySx3PQ=="; };

# Tells the DHCP server to assign addresses to clients without 
# static host declarations. Otherwise, only clients you've 
# manually given addresses to later in the file will get DHCP assignments.
allow unknown-clients;

# Tells the DHCP server to tell static-mapped clients what their 
# hostname is via the "hostname" option inside the DHCP response. 
# It is a legacy option left on because in some cases it can 
# simplify DHCP server configuration; 
# most clients ignore the "hostname" option entirely.
use-host-decl-names on;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
# Sets debug logging. Helps identify any DHCP config problems. 
# After things are verified good, we can scale this back to local2.
log-facility local2;

# DNS Zones
# Defines the DNS forward and reverse zones inside of which our 
# DHCP server will be operating, as well as the key that we'll 
# have to use to do dynamic updating in those zones. 
# asarcar.com DNS zones
zone asarcar.com. {
    primary localhost; # This server is the primary DNS server for the zone
    key rndc-key; # Use the key we defined earlier for dynamic updates
}

zone 22.7.10.in-addr.arpa. {
    primary localhost; # This server is the primary DNS server for the zone
    key rndc-key; # Use the key we defined earlier for dynamic updates
}

# No service will be given on this subnet, but declaring it helps the 
# DHCP server to understand the network topology.

#subnet 10.152.187.0 netmask 255.255.255.0 {
#}

# This is a very basic subnet declaration.

#subnet 10.254.239.0 netmask 255.255.255.224 {
#  range 10.254.239.10 10.254.239.20;
#  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;
#}

# This declaration allows BOOTP clients to get dynamic addresses,
# which we don't really recommend.

#subnet 10.254.239.32 netmask 255.255.255.224 {
#  range dynamic-bootp 10.254.239.40 10.254.239.60;
#  option broadcast-address 10.254.239.31;
#  option routers rtr-239-32-1.example.org;
#}

# A slightly different configuration for an internal subnet.
#subnet 10.5.5.0 netmask 255.255.255.224 {
#  range 10.5.5.26 10.5.5.30;
#  option domain-name-servers ns1.internal.example.org;
#  option domain-name "internal.example.org";
#  option routers 10.5.5.1;
#  option broadcast-address 10.5.5.31;
#  default-lease-time 600;
#  max-lease-time 7200;
#}

# Hosts which require special configuration options can be listed in
# host statements.   If no address is specified, the address will be
# allocated dynamically (if possible), but the host-specific information
# will still come from the host declaration.

#host passacaglia {
#  hardware ethernet 0:0:c0:5d:bd:95;
#  filename "vmunix.passacaglia";
#  server-name "toccata.fugue.com";
#}

# Fixed IP addresses can also be specified for hosts.   These addresses
# should not also be listed as being available for dynamic assignment.
# Hosts for which fixed IP addresses have been specified can boot using
# BOOTP or DHCP.   Hosts for which no fixed address is specified can only
# be booted with DHCP, unless there is an address range on the subnet
# to which a BOOTP client is connected which has the dynamic-bootp flag
# set.
#host fantasia {
#  hardware ethernet 08:00:07:26:c0:a5;
#  fixed-address fantasia.fugue.com;
#}

# You can declare a class of clients and then do address allocation
# based on that.   The example below shows a case where all clients
# in a certain class get addresses on the 10.17.224/24 subnet, and all
# other clients get addresses on the 10.0.29/24 subnet.

#class "foo" {
#  match if substring (option vendor-class-identifier, 0, 4) = "SUNW";
#}

#shared-network 224-29 {
#  subnet 10.17.224.0 netmask 255.255.255.0 {
#    option routers rtr-224.example.org;
#  }
#  subnet 10.0.29.0 netmask 255.255.255.0 {
#    option routers rtr-29.example.org;
#  }
#  pool {
#    allow members of "foo";
#    range 10.17.224.10 10.17.224.250;
#  }
#  pool {
#    deny members of "foo";
#    range 10.0.29.10 10.0.29.230;
#  }
#}

# DHCP Scope
# A "scope" in DHCP terminology is a chunk of your network which will be 
# assigned dynamic IP addresses and DHCP configuration options out of the 
# same bucket. If you had two different blocks of network addresses--say, 
# one for wireless clients and one for wired--you map build two scopes. 
# asarcar.com LAN scope
subnet 10.7.22.0 netmask 255.255.255.0 {  
    range 10.7.22.100 10.7.22.254; # address handed out to unknown clients
    option subnet-mask 255.255.255.0;
    option routers 10.7.22.1;
    option domain-name-servers 10.7.22.2;
    option domain-name "asarcar.com."; # forward zone name
    ddns-domainname "asarcar.com."; # reverse zone name (DHCP figures out full name)
    ddns-rev-domainname "in-addr.arpa.";
}

# Static Hosts
# Statically-assigned DHCP addresses are handy if you want some hosts 
# to always have the same IP address, but don't want to have to sit 
# down at each host and enter its address information manually. 
# Plus, if the name of the DNS server or any of the domain info 
# ever changes, you can update it at the DHCP server instead of 
# having to track down each of the hosts.
# asarcar.com group
group {
    host titan.asarcar.com { # FQDN
        hardware ethernet 20:6A:8A:4D:A8:49;
        fixed-address 10.7.22.50; # 50-99 address for clients requesting static address
        ddns-hostname "titan"; # name used in dynamic update to DNS server
    }
}
